// 자바스크립트의 모든 함수는 클로저를정의한다
// 이를 활용하면 변수를 은닉하여 지속성을 보장하는 등의 다양한 기능을 구현할수 있습니다.
// 자바스크립트는 스킴(Scheme)이라는 언어에서 큰 영향을 받았습니다. 클로저 또한 스킴에서 받아들인 기능입니다.

// 자기 자신이 정의된 환경에서 함수 안에 있는 자유 변수의 식별자 결정을 실행한다.

let a = "A"; // 전역변수
function f() {
    let b = "B"; // 함수 f 의 지역변수 이자 function g 의 렉시컬 컴포넌트 안의 변수
    // console.log(c); g 펑션은 닫혀있으므로 변수 c 에 접근할수 없다 클로저
    function g(){
        let c = "C"; // g 의 지역변수 이자 선언적 환경 레코드 
        console.log('a+b+c :>> ', a+b+c);
    }
    g();
}
f();

// 클로저의 어원
// 위의 예에 등장한 중첩 함수 g는 열린 함수 입니다 그러나 유효범위 체인으로 주변 환경의 변소 b와 a를 들여와서 실질적으로는 폐쇄 함수가 되었습니다 .이러한 '열려 있던 것을 닫는다'는 개념이 클로저(Closure)의 어원입니다.

// 클로저의 성질
function makeCounter(){
    let count = 0;
    return f;
    function f(){
        return count++;
    }
}
let counter = makeCounter();
console.log(counter());
console.log(counter());
console.log(counter());

// 클로저를 이해하기 위한 핵심 사항
// - 외부 함수를 호출하면 그 함수 렉시컬 환경 컴포넌트가 생성됩니다. 그리고 그 안에 중첩된 중첩 함수의 함수 객체를 생성해서 반환합니다.
// - 그 결과 외부 함수의 렉시컬 환경 컴포넌트를 참조하는 중첩 함수가 정의한 클로저가 생성됩니다 
//   즉 외부 함수는 클로저를 생성하는 팩토리 함수 라고 할수 있습니다.
// - 외부 함수가 속한 렉시컬 환경 컴포넌트는 클로저 내부 상태 자체입니다. 외부 함수가 호출될 때마다 새로 생성됩니다.
// - 중첩 함수의 함수 객체가 있는 한 외부 함수가 속한 렉시컬 환경 컴포넌트는 지워지지 않습니다. 외부 함수의 함수 객체가 사라져도 지워지지 않습니다.
// - 클로저 내부 상태( 외부 함수의 지역 변수, 선언적 환경 레코드)는 외부로부터 은폐되어 있으며 중첩함수 안에서만 읽거나 쓸수 있습니다.