// 함수가 호출되어 실행되는 시점에 this 값이 결정됩니다  중요!!!!!

const tom= {
    name : 'Tom',
    // sayhello()=>{ //화살표 함수로 바꾸고 밑에 함수를 호출하면 
                   // tom의 부모는 window 이므로 윈도우의 name 프로퍼티는 없기때문에 undifined를 리턴한다
    sayhello(){
        console.log('Hello!'+ this.name);
    },
};
tom.sayhello();

// 함수호출앞에 오브젝트 객체에서 불러오므로 this 는 tom객체를 스코프 한다
// this는 실행 시점에서 결정된다!

const huck = {name: 'Huck'};
huck.sayhello = tom.sayhello;
huck.sayhello();

// this가 어떤 객체를 가리키는 정리

// 1. 최상위 레벨 코드의 this
// 최상위 레벨 코드의 this 는 전역 객체를 가리킵니다.  실행 문맥이 초기화될 때  그 안의 디스 바인딩 컴포넌크가 전역 환경을 가르키도록 초기화 되기 때문입니다.
// 2. 이벤트 처리기 안에 있는 this
// 이벤트 처리기 안에 있는 this는 이벤트 발생한 요소 객체 (이벤트 처리기가 등록된 객체)를 가리킵닏. 이벤트 처리기 안에 있는this는 15장에서 자세히
// 3. 생성자 함수 안에 있는 this
// 사용자가 정의한 생성자 함수 안에 있는 this 는 그 생성자로 생성한 객체를 가리킵니다.
// 4. 생성자 prototype 메서드 안에 있는 this
// 생성자 prototype 메서드 안에 있는this는 그 생성자로 생성한 객체를 가리킵니다. prototype객체는 9장에서 자세히
// 5. 직접 호출한 함수 안에 있는 this
// 함수를 최상위 레벨의 코드에서 호출하면 함수 안에 있는 this가 전역 객체를 가리킵니다. 이는 f(); 코드 앞에 객체가 없으므로 디스 바인딩 컴포넌트가 전역 객체를 가리키기 때문 입니다.
function f() {console.log('this :>> ', globalThis)}; // es6 에선 globalThis==window==this
f();
// 함수 앞에 어떤 객체를 붙여서 호출하면 디스 바인딩 컴포넌트가 그 객체를 가르킵니다.

function f(){console.log('this :>> ', this)};
// 함수 f 를 호출할 때 함수 앞에 아무것도 붙이지않으면
// 함수 f의 디스 바인딩 컴포넌트가 전역 객체를 가르킨다.

var a = {};
// a 프로퍼티에 위에 정의한 함수f 의 참조를 대입한다
a.f = f;
// a 의 f를 호출하면 함수 f가 실행되는 실행 문맥의 디스 바인딩 컴포넌트가 객체 a를 가르킨다
a.f();

// 6. apply 와 call 메서드로 호출한 함수 안에 있는 this
// 함수 객체의 apply와 call 메서드를 사용하면 함수를 호출할 때 this가 가르키는 객체를 바꿀 수 있습니다. 즉 그 함수 객체가 실행되는 실행 문맥의 디스 바인딩 컴포넌트가 가리키는 객체를 명시적으로 설정할 수 있습니다. apply 와 call 메서드는 8.8.3절 303쪽 에서 배웁니다.